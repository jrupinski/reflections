What happens when you initialize a repository? Why do you need to do it?

Git creates a new directory that keeps track of everything that was commited. We
need to do it because it won't happen automatically.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Working directory is the directory in which we created a repository
(.git folder). Staging area is a middleman for adding files to track in the
repository. Repository keeps track of changes on added files only, not whole
folders.

How can you use the staging area to make sure you have one commit per logical
change?

You can add single files there and check the differences between the current
head and the files in the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

It's very useful when you want to try and create some kind of experimental
feature that might break something on the master branch and make the program
behave in a way that was not meant to.

How do the diagrams help you visualize the branch structure?

It allows me to see which branches are connected, at which point, and allows me
to kind of compare them visually. Also allows me to see which branches are
detached from the rest, and where exactly.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The changes from side branches (other than master) get merged with the latest
version from the master branch. We represent it this way so we can distinguish
that two or more branches were joined together into one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic mode can save a lot of time, but works only if there are no conflicts
between commits/branches when operating on a files. Doing merges manually is
safer, because we can choose exactly what parts to merge and which to leave
intact. It's also necessary when git detects a conflict between branches
regarding a file that was modified by more than one branch in the same place.
