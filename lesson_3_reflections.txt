When would you want to use a remote repository rather than keeping all your work local?

Because it's way harder to share local files with other people, especially if they're far away. Local copies are also prone to breaking (hardware failure), and it's possible that a virus or other malicious software might delete or modify some crucial files. Keeping it in a remote repository allows other users to simply clone the repo to get the newest version of said files, and allows modifying them with ease. It's also safer because no one malicious can get to those files.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because I might want to operate on older version that worked better/had different functionality than the newest version on the branch, and then create a different branch based on this old commit.
If it was done automatically, it might ruin my program, because newest version might use different code than the older version. That's why I want to pull changes by hand.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are used when you want to use somebody else's project from their repository and create a modified version of it that you want to use or share, either for yourself, or for the original creator to consider adding these features to.
Clone is used to download the whole repository (either yours or not) to your PC for local use and modification.
Branches are used if you want to test or add some new experimental features in the master branch of the programs without destroying or modifying the master branch code - you just branch off of it and work alongside it in your own branch.


What is the benefit of having a copy of the last known state of the remote stored locally?

It's useful if your internet connection goes down and after that (before pulling) you add something that conflicts with the newest version on the branch that was downloaded locally - you can see there are some conflicts in there. After that you can just fetch the newest version and check if commits are synced up - if you created a commit on your Git that's in the same place as the new commit in the remote, you can try to merge them!


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I think I would just use the copy-paste method, or sending each other the files to merge between each other. The only easier thing is that we wouldn't have to write commit messages every time we wanted to merge our files. Everything else would be a lot harder and easier to break, for example merging conflicting files - we couldn't just copy and paste them, that would overwrite one file with the other without merging the changes from both!


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It's useful for testing out and creating new functions to the project. It also enables pull commits - they allow other contributors to add new commits/changes to github without merging it with the master branch, it also allows to review the changes, suggest improvements and avoid conflicts between people who are working on a tip of the branch that was older than the newest one. People can discuss changes, comment on lines of code and fix the merge errors without breaking the master branch.
